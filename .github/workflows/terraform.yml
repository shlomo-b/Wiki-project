name: Terraform CD

on:
  push: 
    branches: [ "main" ]
    paths:
      - 'main-infra/**'
  pull_request:
    paths:
      - 'main-infra/**'
  
permissions:
  contents: read

jobs: 
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest


    defaults:
      run:
        shell: bash
        
    steps:
    # Checkout: Access to my code, which can actually work with it.
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS Credentials: It's for communication with AWS using the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    # Setup Terraform CLI: Use the specified version of Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    # Debug Environment: Verify if the AWS credentials and other environment variables are correctly set
    - name: Debug Environment
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "AWS_ACCESS_KEY_ID is set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        terraform version
        aws --version
      working-directory: ./main-infra  # run the tf files from directory main-infra

    # Terraform Init: Sync with the S3 where the terraform.tfstate is stored
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=shlomo-project-ci-cd" \
          -backend-config="key=project-devops/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -input=false
      working-directory: ./main-infra  

    # Terraform Validate: Validate the Terraform configuration files of the tf 
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./main-infra  
       
    # Terraform Plan: Generate and show an execution plan
    - name: Terraform Plan
      run: terraform plan -input=false # -no-color
      working-directory: ./main-infra  
    
    # Terraform Apply: Apply the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      # It's will be trigger when i push/merge to main branch
      
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      # run: terraform apply -auto-approve -input=false # -no-color
      working-directory: ./main-infra
      run: |
        terraform apply -auto-approve # -input=false # -no-color
        
    - name: Install ArgoCD (only if not installed)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        aws eks update-kubeconfig --name my-cluster --region us-east-1
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          if ! helm list -n argocd | grep -q prod-argocd; then
            echo "ArgoCD is not installed. Installing."
            helm install prod-argocd argo/argo-cd --namespace argocd --create-namespace --version 7.7.23
          else
            echo "ArgoCD is already installed. Skipping installation."
          fi
    # - name: apply repott and app-of-apps
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     kubectl apply -f repo.yml
    #     kubectl apply -f monitoring-project.yml
    #     kubectl apply -f root-application.yaml
    #   working-directory: ./app-of-apps    
      
      
    
    # - name: Install ClusterSecretStore
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #     aws eks update-kubeconfig --name my-cluster --region us-east-1
    #      sleep 45
    #      kubectl apply -f ClusterSecretStore-application.yml
    #   working-directory: ./apps/ClusterSecretStore

    - name: Terraform Output
      run: terraform output
      working-directory: ./main-infra